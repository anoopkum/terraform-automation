name: Terraform Deployment

on:
  push:
    branches:
      - aiagent-demo

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      AZURE_API_KEY: ${{ secrets.AZURE_API_KEY }}
      AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.0.11'  # Adjust Terraform version as needed

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: terraform init -backend-config="storage_account_name=${{ secrets.STORAGE_ACCOUNT }}" -backend-config="container_name=terraformstate" -backend-config="key=terraform.tfstate"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan -input=false  # Save the plan file

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Create Pull Request
        run: |
          # Create a PR with a title and body if one does not already exist.
          gh pr create --title "Auto PR: Update Terraform configuration" --body "Automated PR generated after successful validations" --base test || echo "PR creation skipped or already exists"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge Pull Request
        run: |
          # Auto merge the PR using squash merge. The command will exit with success if no open PR is found.
          gh pr merge --auto --squash || echo "No PR to merge or merge failed"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  